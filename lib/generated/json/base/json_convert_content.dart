// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:pick_pic/model/photo_entity.dart';
import 'package:pick_pic/generated/json/photo_entity_helper.dart';
import 'package:pick_pic/model/search_photo_entity.dart';

import '../search_photo_entity_helper.dart';

class JsonConvert<T> {
  T fromJson(Map<String, dynamic> json) {
    return _getFromJson<T>(runtimeType, this, json);
  }

  Map<String, dynamic> toJson() {
    return _getToJson<T>(runtimeType, this) as Map<String, dynamic>;
  }

  static T _getFromJson<T>(Type type, dynamic data, Map<String, dynamic> json) {
    switch (type) {
      case SearchPhotoEntity:
        return searchPhotoEntityFromJson(data as SearchPhotoEntity, json) as T;

      case PhotoEntity:
        return photoEntityFromJson(data as PhotoEntity, json) as T;
      case PhotoUser:
        return photoUserFromJson(data as PhotoUser, json) as T;
      case PhotoUserProfileImage:
        return photoUserProfileImageFromJson(
            data as PhotoUserProfileImage, json) as T;
      case PhotoUserLinks:
        return photoUserLinksFromJson(data as PhotoUserLinks, json) as T;
      case PhotoCurrentUserCollections:
        return photoCurrentUserCollectionsFromJson(
            data as PhotoCurrentUserCollections, json) as T;
      case PhotoUrls:
        return photoUrlsFromJson(data as PhotoUrls, json) as T;
      case PhotoLinks:
        return photoLinksFromJson(data as PhotoLinks, json) as T;
    }
    return data as T;
  }

  static Object? _getToJson<T>(Type type, dynamic data) {
    switch (type) {
      case PhotoEntity:
        return photoEntityToJson(data as PhotoEntity);
      case PhotoUser:
        return photoUserToJson(data as PhotoUser);
      case PhotoUserProfileImage:
        return photoUserProfileImageToJson(data as PhotoUserProfileImage);
      case PhotoUserLinks:
        return photoUserLinksToJson(data as PhotoUserLinks);
      case PhotoCurrentUserCollections:
        return photoCurrentUserCollectionsToJson(
            data as PhotoCurrentUserCollections);
      case PhotoUrls:
        return photoUrlsToJson(data as PhotoUrls);
      case PhotoLinks:
        return photoLinksToJson(data as PhotoLinks);
    }
    return data as T;
  }

  //Go back to a single instance by type
  static Object? _fromJsonSingle<M>(Map<String, dynamic> json) {
    String type = M.toString();
    if (type == (SearchPhotoEntity).toString()) {
      return SearchPhotoEntity().fromJson(json);
    } else if (type == (PhotoEntity).toString()) {
      return PhotoEntity().fromJson(json);
    } else if (type == (PhotoUser).toString()) {
      return PhotoUser().fromJson(json);
    } else if (type == (PhotoUserProfileImage).toString()) {
      return PhotoUserProfileImage().fromJson(json);
    } else if (type == (PhotoUserLinks).toString()) {
      return PhotoUserLinks().fromJson(json);
    } else if (type == (PhotoCurrentUserCollections).toString()) {
      return PhotoCurrentUserCollections().fromJson(json);
    } else if (type == (PhotoUrls).toString()) {
      return PhotoUrls().fromJson(json);
    } else if (type == (PhotoLinks).toString()) {
      return PhotoLinks().fromJson(json);
    }
    return null;
  }

  //list is returned by type
  static M _getListChildType<M>(List data) {
    if (<PhotoEntity>[] is M) {
      return data
          .map<PhotoEntity>(
              (dynamic e) => PhotoEntity().fromJson(e as Map<String, dynamic>))
          .toList() as M;
    } else if (<PhotoUser>[] is M) {
      return data
          .map<PhotoUser>(
              (dynamic e) => PhotoUser().fromJson(e as Map<String, dynamic>))
          .toList() as M;
    } else if (<PhotoUserProfileImage>[] is M) {
      return data
          .map<PhotoUserProfileImage>((dynamic e) =>
              PhotoUserProfileImage().fromJson(e as Map<String, dynamic>))
          .toList() as M;
    } else if (<PhotoUserLinks>[] is M) {
      return data
          .map<PhotoUserLinks>((dynamic e) =>
              PhotoUserLinks().fromJson(e as Map<String, dynamic>))
          .toList() as M;
    } else if (<PhotoCurrentUserCollections>[] is M) {
      return data
          .map<PhotoCurrentUserCollections>((dynamic e) =>
              PhotoCurrentUserCollections().fromJson(e as Map<String, dynamic>))
          .toList() as M;
    } else if (<PhotoUrls>[] is M) {
      return data
          .map<PhotoUrls>(
              (dynamic e) => PhotoUrls().fromJson(e as Map<String, dynamic>))
          .toList() as M;
    } else if (<PhotoLinks>[] is M) {
      return data
          .map<PhotoLinks>(
              (dynamic e) => PhotoLinks().fromJson(e as Map<String, dynamic>))
          .toList() as M;
    }
    throw Exception("not fond");
  }

  static M fromJsonAsT<M>(dynamic json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json as Map<String, dynamic>) as M;
    }
  }
}
